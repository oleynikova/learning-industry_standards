

Функция ПолучитьПутьОсновногоКаталога(РабочийКаталог, РазделительПути)

	РаздИмя = СтрНайти(РабочийКаталог, РазделительПути, НаправлениеПоиска.СКонца);
	ОсновнойКаталог = Лев(РабочийКаталог, 7);
    Возврат ОсновнойКаталог;

КонецФункции

Процедура НастройкиGit(РабочийКаталог)

	ЗапуститьПриложение("git init", РабочийКаталог);
	Сообщить("Инициализирован git");
	ЗапуститьПриложение("git config --local user.name ""test""", РабочийКаталог);
	ЗапуститьПриложение("git config --local user.email ""test.test@com""", РабочийКаталог);
	Сообщить("Выполнены настройки пользователя");
	ЗапуститьПриложение("git config --local core.quotepath false", РабочийКаталог);
	Сообщить("Выполнены настройки работы с кириллическими наименованиями файлов");

КонецПроцедуры

Функция ПолучитьМассивФайловДляКопированияИзPrecommit1c()

    МассивФайловДляКопированияИзPrecommit = Новый Массив();
    МассивФайловДляКопированияИзPrecommit.Добавить("pre-commit");
    МассивФайловДляКопированияИзPrecommit.Добавить("v8Reader");
    МассивФайловДляКопированияИзPrecommit.Добавить("tools");
    МассивФайловДляКопированияИзPrecommit.Добавить("ibService");
    МассивФайловДляКопированияИзPrecommit.Добавить("v8files-extractor.os");

    Возврат МассивФайловДляКопированияИзPrecommit;

КонецФункции

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)
	
    КаталогНазначения = Новый Файл(Куда);
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
            УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);           
		КонецЕсли;
	Иначе
        СоздатьКаталог(Куда);
	КонецЕсли;

	Файлы = НайтиФайлы(Откуда, "*.*");
	Для Каждого Файл Из Файлы Цикл       

		Если Файл.ЭтоКаталог() Тогда                       
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, Куда+"\"+Файл.Имя);
            Сообщить("Скопирован каталог " + Файл.Имя);           
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, Куда+"\"+Файл.Имя);
            Сообщить("Скопирован файл " + Файл.Имя);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПодключитьPrecommit1c(ПутьОсновногоКаталога, РазделительПути, РабочийКаталог)

	КаталогPrecommit1c = ПутьОсновногоКаталога + РазделительПути + "precommit1c";
    МассивФайловДляКопированияИзPrecommit = ПолучитьМассивФайловДляКопированияИзPrecommit1c();
    Для каждого ИмяФайла Из МассивФайловДляКопированияИзPrecommit Цикл
        ПутьКФайлуИстиника = КаталогPrecommit1c + РазделительПути + ИмяФайла;
        ПутьКФайлуПриемника = РабочийКаталог + РазделительПути + ".git" + РазделительПути + "hooks" + РазделительПути + ИмяФайла;
        КопироватьСодержимоеКаталога(ПутьКФайлуИстиника, ПутьКФайлуПриемника);
    КонецЦикла;

	Сообщить("Подключен precommit1C");

КонецПроцедуры

Процедура СоздатьФайлыИКаталогиПоbootstrap(РабочийКаталог, РазделительПути) 
   
    СтрокаЗапуска = "git remote add bootstrap git://github.com/silverbulleters/vanessa-bootstrap.git";
	ЗапуститьПриложение(СтрокаЗапуска, РабочийКаталог);

	КодВозврата = 0;
	ЗапуститьПриложение("git fetch bootstrap", РабочийКаталог, Истина, КодВозврата);

    Если КодВозврата = 0 Тогда

       ЗапуститьПриложение("git pull bootstrap master", РабочийКаталог); 
       Сообщить("Созданы файлы и каталоги по bootstrap");
    КонецЕсли;

КонецПроцедуры

РабочийКаталог = ТекущийКаталог();
РазделительПути = ПолучитьРазделительПути();

НастройкиGit(РабочийКаталог);
ПодключитьPrecommit1c(ПолучитьПутьОсновногоКаталога(РабочийКаталог, РазделительПути), РазделительПути, РабочийКаталог);
СоздатьФайлыИКаталогиПоbootstrap(РабочийКаталог, РазделительПути);

